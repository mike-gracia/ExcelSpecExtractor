#region bool AmountExcludable (Line none)
internal Calculatable<bool> _amountExcludable;
/// <summary>
/// Taxpayer is nonmilitary spouse (Calculatable)
/// Reference Number RIMSRRAQ1Tp 
/// </summary>
[Description("Taxpayer is nonmilitary spouse"), Category("1 - Category"), ReferenceNumber("RIMSRRAQ1Tp"), LineNumber("none")]
public bool AmountExcludable { get { return _amountExcludable.Calculate(AmountExcludable_Calculation); } }
private bool AmountExcludable_Calculation()
{
//*//'IF MFJ AND 
//*//     [FDAWCalc:AW9] = 0 AND
//*//     [FDAWCalc:AW10] > 0
//*//         RETURN YES;
//*// ELSE RETURN NO'
return default(bool);
}
#endregion AmountExcludable

#region bool IsPrimaryNonmilitary (Line none)
internal Calculatable<bool> _isPrimaryNonmilitary;
/// <summary>
/// Spouse is nonmilitary spouse (Calculatable)
/// Reference Number RIMSRRAQ1Sp 
/// </summary>
[Description("Spouse is nonmilitary spouse"), Category("1 - Category"), ReferenceNumber("RIMSRRAQ1Sp"), LineNumber("none")]
public bool IsPrimaryNonmilitary { get { return _isPrimaryNonmilitary.Calculate(IsPrimaryNonmilitary_Calculation); } }
private bool IsPrimaryNonmilitary_Calculation()
{
//*//'IF MFJ AND 
//*//     [FDAWCalc:AW10] = 0 AND 
//*//     [FDAWCalc:AW9] > 0
//*//         RETURN YES;
//*// ELSE RETURN NO'
return default(bool);
}
#endregion IsPrimaryNonmilitary

#region bool IsSecondaryNonmilitary (Line none)
internal Calculatable<bool> _isSecondaryNonmilitary;
/// <summary>
/// Both full resident of the same state (Calculatable)
/// Reference Number RIMSRRAQ2 
/// </summary>
[Description("Both full resident of the same state"), Category("1 - Category"), ReferenceNumber("RIMSRRAQ2"), LineNumber("none")]
public bool IsSecondaryNonmilitary { get { return _isSecondaryNonmilitary.Calculate(IsSecondaryNonmilitary_Calculation); } }
private bool IsSecondaryNonmilitary_Calculation()
{
//*//'IF MFJ AND 
//*//     [FDAWCalc:PYNRAWRes] = R AND
//*//     [FDAWCalc:PYNRAWstate] <> 'RI'
//*//        RETURN YES; 
//*// ELSE RETURN NO'
return default(bool);
}
#endregion IsSecondaryNonmilitary

#region decimal AreBothResidentOfSameState (Line none)
internal Calculatable<decimal, RoundedToTheNearestInteger> _areBothResidentOfSameState;
/// <summary>
/// Taxpayer's nonmilitary wage allocated to nonresident state (Calculatable)
/// Reference Number RIMSRRAQ3Tp 
/// </summary>
[Money(AllowNegative = false, Precision = PrecisionType.Zero)]
[Description("Taxpayer's nonmilitary wage allocated to nonresident state"), Category("1 - Category"), ReferenceNumber("RIMSRRAQ3Tp"), LineNumber("none")]
public decimal AreBothResidentOfSameState { get { return _areBothResidentOfSameState.Calculate(AreBothResidentOfSameState_Calculation); } }
private decimal AreBothResidentOfSameState_Calculation()
{
//*//'IF [FDAWCalc:AW9] = 0
//*//        RETURN [FDAWCalc:PYNRAW3] 
//*//                          WHERE [FDAWCalc:PYNRAWState] = 'RI' AND
//*//                                         [FDAWCalc:PYNRAWRes] = N;
//*// ELSE RETURN Blank'
return default(decimal);
}
#endregion AreBothResidentOfSameState

#region decimal PrimaryNonmilitaryWages (Line none)
internal Calculatable<decimal, RoundedToTheNearestInteger> _primaryNonmilitaryWages;
/// <summary>
/// Spouse's nonmilitary wage allocated to nonresident state (Calculatable)
/// Reference Number RIMSRRAQ3Sp 
/// </summary>
[Money(AllowNegative = false, Precision = PrecisionType.Zero)]
[Description("Spouse's nonmilitary wage allocated to nonresident state"), Category("1 - Category"), ReferenceNumber("RIMSRRAQ3Sp"), LineNumber("none")]
public decimal PrimaryNonmilitaryWages { get { return _primaryNonmilitaryWages.Calculate(PrimaryNonmilitaryWages_Calculation); } }
private decimal PrimaryNonmilitaryWages_Calculation()
{
//*//'IF [FDAWCalc:AW10] = 0
//*//         RETURN [FDAWCalc:PYNRAW4] 
//*//                           WHERE [FDAWCalc:PYNRAWState] = 'RI' AND
//*//                                           [FDAWCalc:PYNRAWRes] = N;
//*// ELSE RETURN Blank'
return default(decimal);
}
#endregion PrimaryNonmilitaryWages

#region bool SecondaryNonmilitaryWages (Line none)
internal Calculatable<bool> _secondaryNonmilitaryWages;
/// <summary>
/// Taxpayer qualifies (Calculatable)
/// Reference Number RIMSRRAQTp 
/// </summary>
[Description("Taxpayer qualifies"), Category("1 - Category"), ReferenceNumber("RIMSRRAQTp"), LineNumber("none")]
public bool SecondaryNonmilitaryWages { get { return _secondaryNonmilitaryWages.Calculate(SecondaryNonmilitaryWages_Calculation); } }
private bool SecondaryNonmilitaryWages_Calculation()
{
//*//'IF [AmountExcludable] = YES AND 
//*//      [IsSecondaryNonmilitary] = YES AND
//*//      [AreBothResidentOfSameState] > 0
//*//         RETURN YES; 
//*// ELSE RETURN NO'
return default(bool);
}
#endregion SecondaryNonmilitaryWages

#region bool IsPrimaryQualified (Line none)
internal Calculatable<bool> _isPrimaryQualified;
/// <summary>
/// Spouse qualifies (Calculatable)
/// Reference Number RIMSRRAQSp 
/// </summary>
[Description("Spouse qualifies"), Category("1 - Category"), ReferenceNumber("RIMSRRAQSp"), LineNumber("none")]
public bool IsPrimaryQualified { get { return _isPrimaryQualified.Calculate(IsPrimaryQualified_Calculation); } }
private bool IsPrimaryQualified_Calculation()
{
//*//'IF [IsPrimaryNonmilitary] = YES AND
//*//      [IsSecondaryNonmilitary] = YES AND 
//*//      [PrimaryNonmilitaryWages] > 0
//*//         RETURN YES; 
//*// ELSE RETURN NO'
return default(bool);
}
#endregion IsPrimaryQualified

#region bool IsSecondaryQualified (Line none)
internal Calculatable<bool> _isSecondaryQualified;
/// <summary>
/// Pre - qualifying MSRRA (Calculatable)
/// Reference Number RIMSRRAPreQ 
/// </summary>
[Description("Pre - qualifying MSRRA"), Category("1 - Category"), ReferenceNumber("RIMSRRAPreQ"), LineNumber("none")]
public bool IsSecondaryQualified { get { return _isSecondaryQualified.Calculate(IsSecondaryQualified_Calculation); } }
private bool IsSecondaryQualified_Calculation()
{
//*//'IF MFJ AND 
//*//      ([SecondaryNonmilitaryWages] = YES OR [IsPrimaryQualified] = YES)
//*//         RETURN YES;
//*// ELSE RETURN NO'
return default(bool);
}
#endregion IsSecondaryQualified

#region string IsPreQualifying (Line none)
internal Calculatable<string> _isPreQualifying;
/// <summary>
/// Qualifying person's name (Calculatable)
/// Reference Number RIMSRRAQName 
/// </summary>
[Description("Qualifying person's name"), Category("1 - Category"), ReferenceNumber("RIMSRRAQName"), LineNumber("none")]
public string IsPreQualifying { get { return _isPreQualifying.Calculate(IsPreQualifying_Calculation); } }
private string IsPreQualifying_Calculation()
{
//*//'IF [SecondaryNonmilitaryWages] = YES
//*//         RETURN <TPName>; 
//*// ELSE IF [IsPrimaryQualified] = YES
//*//        RETURN <SPName>'
return default(string);
}
#endregion IsPreQualifying

#region bool? QualifyingPersonName (Line none)
internal Calculatable<bool?> _qualifyingPersonName;
/// <summary>
/// Do you meet all of the following conditions? (Calculatable)
/// Reference Number RIMSRRAQ 
/// </summary>
[Description("Do you meet all of the following conditions?"), Category("1 - Category"), ReferenceNumber("RIMSRRAQ"), LineNumber("none")]
public bool? QualifyingPersonName { get { return _qualifyingPersonName.Calculate(QualifyingPersonName_Calculation); } }
public bool QualifyingPersonName_Value { get { return QualifyingPersonName.GetValueOrDefault();}}
private bool? QualifyingPersonName_Calculation()
{
//*//direct entry in UI
return default(bool);
}
#endregion QualifyingPersonName

#region decimal DoYouMeetConditions (Line none)
internal Calculatable<decimal, RoundedToTheNearestInteger> _doYouMeetConditions;
/// <summary>
/// MSRRA excludable amount (Calculatable)
/// Reference Number RIMSRRAQAmt 
/// </summary>
[Money(AllowNegative = false, Precision = PrecisionType.Zero)]
[Description("MSRRA excludable amount"), Category("1 - Category"), ReferenceNumber("RIMSRRAQAmt"), LineNumber("none")]
public decimal DoYouMeetConditions { get { return _doYouMeetConditions.Calculate(DoYouMeetConditions_Calculation); } }
private decimal DoYouMeetConditions_Calculation()
{
//*//'IF [QualifyingPersonName] = YES AND [SecondaryNonmilitaryWages] = YES
//*//          RETURN [AreBothResidentOfSameState]; 
//*// ELSE IF [QualifyingPersonName] = YES AND [IsPrimaryQualified] = YES
//*//          RETURN [PrimaryNonmilitaryWages];
//*// ELSE RETURN Blank'
return default(decimal);
}
#endregion DoYouMeetConditions

