#region decimal MyThing1 (Line line 10)
internal Calculatable<decimal, RoundedToTheNearestInteger> _myThing1;
/// <summary>
/// ' ratio of Colorado wages<br />and/or self-employment income to total wages and/or<br />self-employment income.' (Calculatable)
/// Reference Number COAppAdj1Perc 
/// </summary>
[Ratio(Precision = PrecisionType.Zero)]
[Description("$Description$"), Category("$Category$"), ReferenceNumber("COAppAdj1Perc"), LineNumber("line 10")]
public decimal MyThing1 { get { return _myThing1.Calculate(MyThing1_Calculation); } }
private decimal MyThing1_Calculation()
{
//'IF [PYNRAWState] = ''CO'' and [PYNRAWRes] = ''P'' or ''N'' THEN
// RETURN ([COPYNRcoWages] plus [COPYNRCOCF]) divided by 
// ([COPYNRFEDWages] plus [COPYNRFedCF])'
return default(decimal);
}
#endregion MyThing1

#region decimal MyThing2 (Line line 10)
internal Changeable<decimal> _myThing2;
/// <summary>
/// 'CO  apportioned amount of IRA deduction, educator expenses, self-employment<br />tax, self-employed health insurance deduction, SEP<br />and SIMPLE deductions, HSA deduction, MSA<br />deduction, QPA expenses, 501(c)(18)(D) pension plan<br />contributions, 403(b) contributions, business<br />expenses of reservists, performing artists and feebasis<br />government officials.' (Changeable)
/// Reference Number COAppAdj1 
/// </summary>
[Money(AllowNegative = false, Precision = PrecisionType.Zero)]
[Description("'CO  apportioned amount of IRA deduction, educator expenses, self-employment<br />tax, self-employed health insurance deduction, SEP<br />and SIMPLE deductions, HSA deduction, MSA<br />deduction, QPA expenses, 501(c)(18)(D) pension plan<br />contributions, 403(b) contributions, business<br />expenses of reservists, performing artists and feebasis<br />government officials.'"), Category("Category"), ReferenceNumber("COAppAdj1"), LineNumber("line 10")]
public decimal MyThing2 { get { return _myThing2.Value; } set {_myThing2.Value = value;}}
#endregion MyThing2

#region decimal MyThing3 (Line line 10)
internal Calculatable<decimal, RoundedToTheNearestInteger> _myThing3;
/// <summary>
/// Adjustments multiplied by apportioned percentage (Calculatable)
/// Reference Number COAppAdj1Tot 
/// </summary>
[Money(AllowNegative = false, Precision = PrecisionType.Zero)]
[Description("Adjustments multiplied by apportioned percentage"), Category("Category"), ReferenceNumber("COAppAdj1Tot"), LineNumber("line 10")]
public decimal MyThing3 { get { return _myThing3.Calculate(MyThing3_Calculation); } }
private decimal MyThing3_Calculation()
{
//'IF [PYNRAWState] = ''CO'' and [PYNRAWRes] = ''P'' or ''N'', THEN
// RETURN [COAppAdj1] multipled by [COAppAdjPerc]
// ELSE
// RETURN Blank'
return default(decimal);
}
#endregion MyThing3

#region decimal MyThing4 (Line line 10)
internal Calculatable<decimal, RoundedToTheNearestInteger> _myThing4;
/// <summary>
/// 'Deductions allowed in the Colorado to federal total<br />income ratio (line 21 / line 20).' (Calculatable)
/// Reference Number COAppAdj2Perc 
/// </summary>
[Ratio(Precision = PrecisionType.Zero)]
[Description("$Description$"), Category("$Category$"), ReferenceNumber("COAppAdj2Perc"), LineNumber("line 10")]
public decimal MyThing4 { get { return _myThing4.Calculate(MyThing4_Calculation); } }
private decimal MyThing4_Calculation()
{
//'IF [PYNRAWState] = ''CO'' and [PYNRAWRes] = ''P'' or ''N'', THEN
// RETURN [COPYNRCOTotInc] divided by [COPYNRFedTotInc] 
// ELSE
// RETURN Blank'
return default(decimal);
}
#endregion MyThing4

#region decimal MyThing5 (Line line 10)
internal Calculatable<decimal, RoundedToTheNearestInteger> _myThing5;
/// <summary>
/// 'Student loan interest deduction, alimony, tuition and<br />fees deduction, clean-fuel vehicle deduction,<br />reforestation amortization, repayment of supplemental<br />unemployment benefits.' (Calculatable)
/// Reference Number COAppAdj2 
/// </summary>
[Money(AllowNegative = false, Precision = PrecisionType.Zero)]
[Description("'Student loan interest deduction, alimony, tuition and<br />fees deduction, clean-fuel vehicle deduction,<br />reforestation amortization, repayment of supplemental<br />unemployment benefits.'"), Category("Category"), ReferenceNumber("COAppAdj2"), LineNumber("line 10")]
public decimal MyThing5 { get { return _myThing5.Calculate(MyThing5_Calculation); } }
private decimal MyThing5_Calculation()
{
//'IF [PYNRAWState] = ''CO'' and [PYNRAWRes] = ''P'' or ''N'', THEN
// RETURN [AW1143] + [AW1159] + [AW1145] 
// ELSE
// RETURN Blank'
return default(decimal);
}
#endregion MyThing5

